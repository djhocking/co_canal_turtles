model {

    mu_a0 ~ dnorm(0, 0.1)
    sd_a0 ~ dt(0, pow(1.5, -2), 1)T(0, )
    sd_a1 ~ dt(0, pow(1, -2), 1)T(0, 1000)
  
   mu_psi ~ dnorm(0, 0.5)
   sd_psi ~ dt(0, pow(1.5, -2), 1)T(0, )
    
    alpha2 ~ dnorm(0, 0.5)
    alpha3 ~ dnorm(0, 0.5)
    
    beta1 ~ dnorm(0, 0.5)
    beta2 ~ dnorm(0, 0.5)
    
    for(t in 1:2){
      mu_a1[t] ~ dnorm(0, 0.5) # fixed intercept differing by sex
    }
    
    for(g in 1:n_sites) {
      
     # mu_psi_site[g] ~ dnorm(mu_psi, 1 / sd_psi / sd_psi) # random intercept by site inseparable from detection intercept
    mu_psi_site[g] ~ dnorm(0, 0.5) # independent prior on augmentation intercept - fixed by site
      
      for(k in 1:K) {
        alpha0[g, k] ~ dnorm(mu_a0, 1 / sd_a0 / sd_a0)
      }
      
      for(i in 1:M[g]) {
        Sex[g, i] ~ dbern(psi.sex[g])
        Sex2[g, i] <- Sex[g, i] + 1
      }
      
      for(t in 1:2){
        sigma[g, t] <- pow(1 / (2*alpha1[g, t]), 0.5) # sd of half normal - derived parameter
        
        alpha1[g, t] ~ dt(0, pow(1.5, -2), 1)T(0, )
       # lalpha1[g, t] ~ dnorm(mu_a1[t], 1 / sd_a1 / sd_a1) # random intercept
      #  alpha1[g, t] <- exp(lalpha1[g, t])
      } # t
      
      # prob of individual being in the population (for augmentation since N unknown)
      logit(psi[g]) <- mu_psi_site[g] + beta1 * depth[g] + beta2 * forest[g] 
      psi.sex[g] ~ dunif(0, 1)
      
      # alpha0[g] ~ dnorm(mu_a0, sd_a0) 
      
     # for(i in 1:(max(M[1:n_sites]))) {
     for(i in 1:M[g]) {
        z[g, i] ~ dbern(psi[g])
        s[g, i] ~ dunif(xlim[g, 1], xlim[g, 2]) ##??
        
        for(j in 1:max_trap[g]) { 
          d[g,i,j] <- abs(s[g, i] - trap_locs[g, j])
          
          for(k in 1:K) {
            for(t in 1:2) {
              logit(p0[g, i, j, k, t]) <- alpha0[g, k] + alpha3 * Sex[g, i] + (alpha2 * C[i, k, g])  
            } # t
          } # k
        } # j
      } # i    
      
      for(i in 1:M[g]) {
        for (j in 1:max_trap[g]) {
          for (k in 1:K) {
            y[i, j, k, g] ~ dbern(p[g, i, j, k])
            p[g, i, j, k] <- z[g, i] * p0[g, i, j, k, Sex2[g, i]] * exp(- alpha1[g, Sex2[g, i]] * d[g, i,j] * d[g, i,j])
          } # i
        } # j
      } # k
      
      # Derived parameters
      N[g] <- sum(z[g , 1:M[g]])
      density[g] <- sum(z[g , 1:M[g]]) / (xlim[g, 2] - xlim[g, 1]) # divided distances by 100 so calculates turtles per 100 m of canal
      sigma_site[g] <- mean(sigma[g, 1:2])    
    } # g
    
    for(k in 1:K) {
     for(g in 1:n_sites) { 
        p_cap_site_day[g, k] <- mean(p[g, 1:M[g], 1:max_trap[g], k])
        }
      p_cap_day[k] <- mean(p_cap_site_day[ , k])
      }
      
    for(t in 1:2) {
      for(g in 1:n_sites) { 
      for(i in 1:M[g]) {
        p_cap_ind_site_sex[i, g, t] <- mean(p0[g, i, 1:max_trap[g], 1:K, t])
        }
        p_cap_site_sex[g, t] <- mean(p_cap_ind_site_sex[1:M[g], g, t])
        }
      p_cap_sex[t] <- mean(p_cap_site_sex[1:n_sites, t])
      sigma_sex[t] <- mean(sigma[ , t])
    }
    
    sigma_mean <- mean(sigma[ , ])
    
    for(g in 1:n_sites) {
      for(i in 1:M[g]) {
        p_cap_site_ind[g, i] <- sum(p[g, i, 1:max_trap[g], 1:K])
      }
      p_cap_site[g] <- mean(p_cap_site_ind[g, 1:M[g]])
    }
    
}
     